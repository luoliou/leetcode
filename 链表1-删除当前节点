qustion：
Implement an algorithm to delete a node in the middle (i.e., any node but the first and last node, not necessarily the exact middle) of a singly linked list, given only access to that node.

 

Example:

Input: the node c from the linked list a->b->c->d->e->f
Output: nothing is returned, but the new linked list looks like a->b->d->e->f




解题思路

删除当前节点 必须知道prev节点， 这里只能访问当前节点，就只能先将next节点的值赋值给当前结点, 再把next节点干掉
代码


class Solution {
public:
    void deleteNode(ListNode* node) {

        //将next结点的值 赋值给 当前结点
        node->val = node->next->val;

        //干掉next结点
        ListNode* tmp = node->next;//这一句话也可以不要
        node->next = node->next->next;
        
        delete tmp;//这一句话也可以不要
    }
};
